今天主要进行了：ajax方案二，三，复杂对象请求处理，自定义异常机制的环境搭建。

注意点：
1.问题：所有ajax中的回调函数，均没有alert弹出内容？？
2.问题：方案三前端已将json数组转为了字符串，为什么后端接收时还是用的还是数组集合类型List<Integer> array？？  
    答：传过来的是对象，只要保证对象中的属性名同前端的参数名一致即可，此处都是array，前端stringify(array),后端？？看List<Integer>源码？？？

学习流程：
1.利用ajax处理请求数据：方案二：代码同方案一大致相同，不同之处：前端中将ajax请求里面的url改一下，将“data”由“array”:[5,8,12]改为，“array[0]”:5,“array[1]”:8,“array[2]”:12。 
                                                 后端部分:创建ParamData类，成员变量名设置为array，handler部分参数列表用ParamData类对象接收，调动get方法得到参数，进行处理
                     方案三：前两种方案发送的请求参数都是JSON数组，方案三不同之处：前段中将要发送给服务器端的数组通过var命名，再通过JSON的stringify方法转化成了字符串，
                                                                           ajax定义“data”为Json字符串的变量名，同时告诉服务器端要发送的请求体的内容类型是json数据
                                                                           "contentType":"application/json;charset=UTF-8"。
                                                                           后端部分：handler类中用@RequestBody进行接收，此时一定要注意springmvc配置文件中的mvc命名空间是否正确。
                                                                                    阿里的命名空间是错的，正确的应该是springframework，不然会报415错误，且出错的地方极其难找！
                                                                                    
知识点：
1. 1.1@RequestMapping是用来处理请求地址映射的注解，前端定义的动态参数，要与@PathVariable配合；
   1.2@ResponseBody作用是将该方法返回的结果直接响应到HTTP正文当中，因此最后写上return"success"；时不会配合视图解析器跳转到success.jsp页面，而是直接将"success"字符串返回给HTTP响应正文
  （因此在回调函数中，alert(response）弹出的是success），通常在异步请求时使用，即返回的数据不是html页面标签，而是json,xml等格式的数据的时候使用。
   1.3@RequestBody作用是将HTTP请求内容插入到方法当中，需要注意的是request中body部分的数据编码格式由request header中的contentType所指定（contentType可在ajax中进行设置），
   注：get方法无请求体，因此用@RequestBody注解时，提交的方法只能是POST。
   1.4@RequestBody与@RequestParam的区别：1.4.1 @RequestParam主要处理的是contentType为application/x-www-form-urlencoded类型的数据（默认），而@RequestBody一般用于处理
                                       非contentType为application/x-www-form-urlencoded编码方式的数据，主要用于在ajax中处理contentType为application/json类型的数据；
                                       1.4.2 @RequestParam声明的变量名要与前端传过来的变量名一致，@RequestBody声明的是对象，对象中的属性名要与前端传过来的key值一致
                                       1.4.3 @RequestParam在方法中可使用多次，而@RequestBody在方法中只能使用一次（用一次后就自动关闭IO流）。
                                       1.4.4 @RequestParam接受的参数来自请求头，即requestHeader中，而@RequestBody接受的参数来自请求体
                                       1.4.5 在get请求中无法使用@RequestBody。
2. tomcat处理一个HTTP请求的过程：2.1 用户输入请求地址http://localhost8080/iportal/index.jsp来发送请求，请求到与地址中对应的端口号  
                              2.2 server.xml文件中，<Connector>用来接收8080端口号的用户请求，并将其发送给<Engine>处理
                              2.3 <Engine>会去<host>中匹配主机，匹配到主机名为localhost（与请求地址中的主机名称相对应）
                              2.4 <host>获得请求/iportal/index.jsp，会去<Context>中匹配/iportal路径的<Context>，若没有匹配到，则把""交给Context处理
                              2.5 web.xml中匹配.jsp，对格式为jsp的请求进行设置（拦截等等）。
                              2.6 tomcat服务器构造HttpServletRequest对象和HttpServletResponse对象，可在后端中进行业务处理（注意路径匹配），最后把HttpServletResponse对象返回给Host
